-- Generated by Haxe 4.2.1+bf9ff69
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__defold_support_Script = _hx_e()
local Main = _hx_e()
local MainRes = _hx_e()
local Math = _hx_e()
local ScreenMessages = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__arena_ArenaScreen = _hx_e()
__arena_ArenaScreenRes = _hx_e()
__arena_BlockViewMessages = _hx_e()
__arena_BlockView = _hx_e()
__arena_stage_Arena = _hx_e()
__arena_stage_ArenaConst = _hx_e()
__arena_stage_ArenaEvent = _hx_e()
__arena_stage_CellsExt = _hx_e()
__defold_CollectionproxyMessages = _hx_e()
__defold_GoMessages = _hx_e()
__defold_support_Init = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Log = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

__defold_support_Script.new = function() 
  local self = _hx_new()
  __defold_support_Script.super(self)
  return self
end
__defold_support_Script.super = function(self) 
end

Main.new = function() 
  local self = _hx_new(Main.prototype)
  Main.super(self)
  return self
end
Main.super = function(self) 
  self.use_fixed_fit_projection = _G.hash("use_fixed_fit_projection");
  __defold_support_Script.super(self);
end
Main.gotoScreen = function(factory) 
  _G.msg.post(MainRes.screen, ScreenMessages.goto_screen, _hx_o({__fields__={screen=true},screen=factory}));
end
Main.prototype = _hx_e();
Main.prototype.init = function(self,_self) 
  Main.DISPLAY_WIDTH = Std.parseInt(_G.sys.get_config("display.width"));
  Main.DISPLAY_HEIGHT = Std.parseInt(_G.sys.get_config("display.height"));
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _G.msg.post("@render:", self.use_fixed_fit_projection, _hx_o({__fields__={near=true,far=true},near=-1,far=1}));
  __haxe_Log.trace(_G.msg.url(), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=49,className="Main",methodName="init"}));
  __arena_ArenaScreen.Enter();
end
Main.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == ScreenMessages.goto_screen then 
    if (_self.currentScreen ~= nil) then 
      _G.msg.post(_self.currentScreen, __defold_CollectionproxyMessages.disable);
      _G.msg.post(_self.currentScreen, __defold_CollectionproxyMessages.unload);
      _self.currentScreen = nil;
    end;
    _G.msg.post(message.screen, __defold_CollectionproxyMessages.async_load);
  elseif (message_id) == __defold_CollectionproxyMessages.proxy_loaded then 
    _self.currentScreen = sender;
    _G.msg.post(sender, __defold_CollectionproxyMessages.init);
    _G.msg.post(sender, __defold_CollectionproxyMessages.enable); end;
end
Main.__super__ = __defold_support_Script
setmetatable(Main.prototype,{__index=__defold_support_Script.prototype})

MainRes.new = {}

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

ScreenMessages.new = {}

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = _G.string.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^[ \t\r\n]*([%-+]*0[xX][%da-fA-F]*)");
  if (hexMatch ~= nil) then 
    local sign;
    local _g = _G.string.byte(hexMatch, 1);
    if (_g) == 43 then 
      sign = 1;
    elseif (_g) == 45 then 
      sign = -1;else
    sign = 0; end;
    local pos = (function() 
      local _hx_1
      if (sign == 0) then 
      _hx_1 = 2; else 
      _hx_1 = 3; end
      return _hx_1
    end )();
    local len = nil;
    len = #hexMatch;
    if (pos < 0) then 
      pos = #hexMatch + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return (function() 
      local _hx_2
      if (sign == -1) then 
      _hx_2 = -1; else 
      _hx_2 = 1; end
      return _hx_2
    end )() * _G.tonumber(_G.string.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end

__arena_ArenaScreen.new = function() 
  local self = _hx_new(__arena_ArenaScreen.prototype)
  __arena_ArenaScreen.super(self)
  return self
end
__arena_ArenaScreen.super = function(self) 
  __defold_support_Script.super(self);
end
__arena_ArenaScreen.Enter = function() 
  Main.gotoScreen(MainRes.screen_collection_proxy_arena);
end
__arena_ArenaScreen.prototype = _hx_e();
__arena_ArenaScreen.prototype.init = function(self,_self) 
  local _gthis = self;
  _self.blocks = __haxe_ds_IntMap.new();
  _self.arena = __arena_stage_Arena.Empty(function(event) 
    _gthis:onArenaEvent(_self, event);
  end);
  __arena_ArenaScreen.ArenaInst = _self.arena;
end
__arena_ArenaScreen.prototype.final_ = function(self,_self) 
  __arena_ArenaScreen.ArenaInst = nil;
end
__arena_ArenaScreen.prototype.update = function(self,_self,dt) 
  _self.arena:update(dt);
end
__arena_ArenaScreen.prototype.onArenaEvent = function(self,_self,event) 
  local tmp = event[1];
  if (tmp) == 0 then 
  elseif (tmp) == 1 then 
    local _g = event[2];
    local blockId = _G.factory.create(__arena_ArenaScreenRes.arena_block_factory);
    local _this = _self.blocks;
    local key = _g.id;
    if (blockId == nil) then 
      _this.h[key] = __haxe_ds_IntMap.tnull;
    else
      _this.h[key] = blockId;
    end;
    _G.go.set_parent(blockId, __arena_ArenaScreenRes.arena);
    _G.msg.post(blockId, __arena_BlockViewMessages.setup, _hx_o({__fields__={block=true,reason=true},block=_g,reason=event[3]}));
  elseif (tmp) == 2 then 
    local _g = event[2];
    local ret = _self.blocks.h[_g];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local blockId = ret;
    if (blockId ~= nil) then 
      _G.go.delete(blockId);
      _self.blocks:remove(_g);
    end;
  elseif (tmp) == 3 then 
    local ret = _self.blocks.h[event[2]];
    if (ret == __haxe_ds_IntMap.tnull) then 
      ret = nil;
    end;
    local blockId = ret;
    if (blockId ~= nil) then 
      _G.msg.post(blockId, __arena_BlockViewMessages.move, _hx_o({__fields__={x=true,y=true},x=event[3],y=event[4]}));
    end;
  elseif (tmp) == 4 then  end;
end
__arena_ArenaScreen.__super__ = __defold_support_Script
setmetatable(__arena_ArenaScreen.prototype,{__index=__defold_support_Script.prototype})

__arena_ArenaScreenRes.new = {}

__arena_BlockViewMessages.new = {}

__arena_BlockView.new = function() 
  local self = _hx_new(__arena_BlockView.prototype)
  __arena_BlockView.super(self)
  return self
end
__arena_BlockView.super = function(self) 
  __defold_support_Script.super(self);
end
__arena_BlockView.prototype = _hx_e();
__arena_BlockView.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == __arena_BlockViewMessages.move then 
    local x = message.x;
    local y = message.y;
    if (_self.isCellLocked) then 
      _self.isCellLocked = false;
      __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
    end;
    _self.isCellLocked = true;
    _self.lockedCellX = x;
    _self.lockedCellY = y;
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, __arena_stage_ArenaConst.tileCenter(message.x, message.y), _G.go.EASING_LINEAR, 0.15, 0, _hx_bind(self,self.move_done));
  elseif (message_id) == __arena_BlockViewMessages.setup then 
    local _g = message.reason;
    if (_g) == 0 then 
      _G.go.set_position(__arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y + 1));
      local x = message.block.x;
      local y = message.block.y;
      if (_self.isCellLocked) then 
        _self.isCellLocked = false;
        __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
      end;
      _self.isCellLocked = true;
      _self.lockedCellX = x;
      _self.lockedCellY = y;
      __arena_ArenaScreen.ArenaInst:lockCell(x, y);
      _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, __arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y), _G.go.EASING_LINEAR, 0.15, 0, _hx_bind(self,self.move_done));
    elseif (_g) == 1 then 
      _G.go.set_position(__arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y)); end; end;
end
__arena_BlockView.prototype.move_done = function(self,_self,_,_1) 
  __haxe_Log.trace(1, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/arena/BlockView.hx",lineNumber=56,className="arena.BlockView",methodName="move_done"}));
  if (_self.isCellLocked) then 
    _self.isCellLocked = false;
    __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
  end;
end
__arena_BlockView.__super__ = __defold_support_Script
setmetatable(__arena_BlockView.prototype,{__index=__defold_support_Script.prototype})

__arena_stage_Arena.new = function(stage,listener) 
  local self = _hx_new(__arena_stage_Arena.prototype)
  __arena_stage_Arena.super(self,stage,listener)
  return self
end
__arena_stage_Arena.super = function(self,stage,listener) 
  self._stage = stage;
  self._listener = listener;
  local size = self._stage.size;
  self._cells = Array.new();
  local _g = 0;
  while (_g < size) do 
    _g = _g + 1;
    local row = Array.new();
    self._cells:push(row);
    local _g = 0;
    while (_g < size) do 
      _g = _g + 1;
      row:push(_hx_o({__fields__={lock=true},lock=0}));
    end;
  end;
  self._listener(__arena_stage_ArenaEvent.Resize(self._stage.size));
end
__arena_stage_Arena.Empty = function(listener) 
  do return __arena_stage_Arena.new(_hx_o({__fields__={identity=true,size=true,cells=true},identity=0,size=8,cells=__arena_stage_CellsExt.Empty(8)}), listener) end;
end
__arena_stage_Arena.prototype = _hx_e();
__arena_stage_Arena.prototype.getId = function(self) 
  local tmp = (function() 
  local _hx_obj = self._stage;
  local _hx_fld = 'identity';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)();
  do return tmp end
end
__arena_stage_Arena.prototype.update = function(self,dt) 
  self:handleGenerateBlocks();
  self:handleEmptyCells();
end
__arena_stage_Arena.prototype.spawnBlock = function(self,x,y,kind,reason) 
  if (self._stage.cells[y][x].block ~= nil) then 
    self._listener(__arena_stage_ArenaEvent.BlockDespawned(self._stage.cells[y][x].block.id));
  end;
  local tmp = self._stage.cells[y];
  local tmp1 = self:getId();
  tmp[x].block = _hx_o({__fields__={id=true,x=true,y=true,kind=true},id=tmp1,x=x,y=y,kind=kind});
  self._listener(__arena_stage_ArenaEvent.BlockSpawned(self._stage.cells[y][x].block, reason));
end
__arena_stage_Arena.prototype.lockCell = function(self,x,y) 
  local fh = self._cells[y][x];
  fh.lock = fh.lock + 1;
end
__arena_stage_Arena.prototype.unlockCell = function(self,x,y) 
  local fh = self._cells[y][x];
  fh.lock = fh.lock - 1;
end
__arena_stage_Arena.prototype.handleGenerateBlocks = function(self) 
  local size = self._stage.size;
  local top = size - 1;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < size) do repeat 
    _g = _g + 1;
    local x = _g - 1;
    if (self._cells[top][x].lock ~= 0) then 
      break;
    end;
    if (self._stage.cells[top][x].block ~= nil) then 
      break;
    end;
    self:spawnBlock(x, top, 1, 0);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
__arena_stage_Arena.prototype.handleEmptyCells = function(self) 
  local size = self._stage.size;
  local cells = self._stage.cells;
  local _g = 1;
  while (_g < size) do 
    _g = _g + 1;
    local y = _g - 1;
    local _g = 0;
    local _hx_continue_2 = false;
    while (_g < size) do repeat 
      _g = _g + 1;
      local x = _g - 1;
      if (self._cells[y][x].lock ~= 0) then 
        break;
      end;
      if ((cells[y][x].block == nil) or (cells[y - 1][x].block ~= nil)) then 
        break;
      end;
      local block = cells[y][x].block;
      block.x = x;
      block.y = y - 1;
      cells[y - 1][x].block = block;
      cells[y][x].block = nil;
      self._listener(__arena_stage_ArenaEvent.BlockMoved(block.id, x, y - 1));until true
      if _hx_continue_2 then 
      _hx_continue_2 = false;
      break;
      end;
      
    end;
  end;
end

__arena_stage_ArenaConst.new = {}
__arena_stage_ArenaConst.tileCenter = function(x,y) 
  do return _G.vmath.vector3((x * 92) + 46., (y * 92) + 46., 0) end;
end

__arena_stage_ArenaEvent.Resize = function(size) local _x = _hx_tab_array({[0]="Resize",0,size,__enum__=__arena_stage_ArenaEvent}, 3); return _x; end 
__arena_stage_ArenaEvent.BlockSpawned = function(block,reason) local _x = _hx_tab_array({[0]="BlockSpawned",1,block,reason,__enum__=__arena_stage_ArenaEvent}, 4); return _x; end 
__arena_stage_ArenaEvent.BlockDespawned = function(id) local _x = _hx_tab_array({[0]="BlockDespawned",2,id,__enum__=__arena_stage_ArenaEvent}, 3); return _x; end 
__arena_stage_ArenaEvent.BlockMoved = function(id,x,y) local _x = _hx_tab_array({[0]="BlockMoved",3,id,x,y,__enum__=__arena_stage_ArenaEvent}, 5); return _x; end 
__arena_stage_ArenaEvent.BlockKindChanged = function(id,kind) local _x = _hx_tab_array({[0]="BlockKindChanged",4,id,kind,__enum__=__arena_stage_ArenaEvent}, 4); return _x; end 

__arena_stage_CellsExt.new = {}
__arena_stage_CellsExt.Empty = function(size) 
  local result = Array.new();
  local _g = 0;
  while (_g < size) do 
    _g = _g + 1;
    local row = Array.new();
    result:push(row);
    local _g = 0;
    while (_g < size) do 
      _g = _g + 1;
      row:push(_hx_o({__fields__={block=true},block=nil}));
    end;
  end;
  do return result end;
end

__defold_CollectionproxyMessages.new = {}

__defold_GoMessages.new = {}

__defold_support_Init.new = {}
__defold_support_Init.init = function(exports) 
  local script = __arena_BlockView.new();
  exports.arena_BlockView_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = Main.new();
  exports.Main_init = function(_self) 
    script:init(_self);
  end;
  exports.Main_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = __arena_ArenaScreen.new();
  exports.arena_ArenaScreen_init = function(_self) 
    script:init(_self);
  end;
  exports.arena_ArenaScreen_final_ = function(_self) 
    script:final_(_self);
  end;
  exports.arena_ArenaScreen_update = function(_self,dt) 
    script:update(_self, dt);
  end;
end

__haxe_IMap.new = {}

__haxe_Log.new = {}
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_e();
__haxe_ds_IntMap.prototype.remove = function(self,key) 
  if (self.h[key] == nil) then 
    do return false end;
  else
    self.h[key] = nil;
    do return true end;
  end;
end

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new()
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  _hxdefold_ = _hxdefold_ or {}
  __defold_support_Init.init(_hxdefold_);MainRes.screen = _G.msg.url("main:/screen");
  
  MainRes.screen_collection_proxy_arena = _G.msg.url("main:/screen#collection_proxy_arena");
  
  ScreenMessages.goto_screen = _G.hash("main_goto_screen");
  
  __arena_ArenaScreenRes.arena = _G.msg.url("arena:/arena");
  
  __arena_ArenaScreenRes.arena_block_factory = _G.msg.url("arena:/arena#block_factory");
  
  __arena_BlockViewMessages.setup = _G.hash("block_view_setup");
  
  __arena_BlockViewMessages.move = _G.hash("block_view_move");
  
  __defold_CollectionproxyMessages.async_load = _G.hash("async_load");
  
  __defold_CollectionproxyMessages.disable = _G.hash("disable");
  
  __defold_CollectionproxyMessages.enable = _G.hash("enable");
  
  __defold_CollectionproxyMessages.init = _G.hash("init");
  
  __defold_CollectionproxyMessages.proxy_loaded = _G.hash("proxy_loaded");
  
  __defold_CollectionproxyMessages.unload = _G.hash("unload");
  
  __defold_GoMessages.acquire_input_focus = _G.hash("acquire_input_focus");
  
  __haxe_ds_IntMap.tnull = ({});
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_print = print or (function() end)

_hx_static_init();
