-- Generated by Haxe 4.2.1+bf9ff69
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Date = _hx_e()
local InputRes = _hx_e()
local Lambda = _hx_e()
__defold_support_Script = _hx_e()
local Main = _hx_e()
local MainRes = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local ScreenMessages = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
__arena_ArenaAtlasRes = _hx_e()
__arena_ArenaLobbyWindowMessages = _hx_e()
__defold_support_GuiScript = _hx_e()
__arena_ArenaLobbyWindow = _hx_e()
__arena_ArenaLobbyWindowRes = _hx_e()
__arena_Enter = _hx_e()
__arena_stage_ArenaListener = _hx_e()
__arena_ArenaScreen = _hx_e()
__arena_ArenaScreenGuiMessages = _hx_e()
__arena_ArenaScreenGui = _hx_e()
__arena_ArenaScreenGuiRes = _hx_e()
__arena_ArenaScreenRes = _hx_e()
__arena_BlockViewMessages = _hx_e()
__arena_BlockView = _hx_e()
__arena_BlockViewRes = _hx_e()
__arena_RocketMessages = _hx_e()
__arena_RocketView = _hx_e()
__arena_stage_Arena = _hx_e()
__arena_stage_Layer = _hx_e()
__arena_stage_ArenaConst = _hx_e()
__arena_stage_Input = _hx_e()
__arena_stage_ArenaController = _hx_e()
__arena_stage_Common = _hx_e()
__arena_stage_ArenaControllerWS = _hx_e()
__arena_stage_CellsExt = _hx_e()
__common_Random = _hx_e()
__defold_CollectionproxyMessages = _hx_e()
__defold_GoMessages = _hx_e()
__meta_MetaScreen = _hx_e()
__meta_MetaResultMessageGui = _hx_e()
__meta_MetaScreenGui = _hx_e()
__defold_support_Init = _hx_e()
__gui_Button = _hx_e()
__gui_Capture = _hx_e()
__gui_GUI = _hx_e()
__gui__Listbox_ListboxListener_Impl_ = _hx_e()
__gui_Listbox = _hx_e()
__gui_TextMap = _hx_e()
__gui_Windows = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_ds_List = _hx_e()
__haxe_ds__List_ListNode = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__meta_MetaResultMessageGuiMessages = _hx_e()
__meta_Enter = _hx_e()
__meta_MetaScreenRes = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
Date.__name__ = true
Date.prototype = _hx_e();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

InputRes.new = {}
InputRes.__name__ = true

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    if (x:next() == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

__defold_support_Script.new = function() 
  local self = _hx_new(__defold_support_Script.prototype)
  __defold_support_Script.super(self)
  return self
end
__defold_support_Script.super = function(self) 
end
__defold_support_Script.__name__ = true
__defold_support_Script.prototype = _hx_e();

__defold_support_Script.prototype.__class__ =  __defold_support_Script

Main.new = function() 
  local self = _hx_new(Main.prototype)
  Main.super(self)
  return self
end
Main.super = function(self) 
  self.use_fixed_fit_projection = _G.hash("use_fixed_fit_projection");
  __defold_support_Script.super(self);
end
Main.__name__ = true
Main.screen_to_viewport = function(x,y) 
  local _hx_1_wsize_width, _hx_1_wsize_height = _G.window.get_size();
  local scale = _G.math.min(_hx_1_wsize_width / Main.DISPLAY_WIDTH, _hx_1_wsize_height / Main.DISPLAY_HEIGHT);
  x = (x / scale) - (((_hx_1_wsize_width / scale) - Main.DISPLAY_WIDTH) / 2);
  y = (y / scale) - (((_hx_1_wsize_height / scale) - Main.DISPLAY_HEIGHT) / 2);
  do return _hx_o({__fields__={x=true,y=true},x=x,y=y}) end;
end
Main.gotoScreen = function(factory) 
  _G.msg.post(MainRes.screen, ScreenMessages.goto_screen, _hx_o({__fields__={screen=true},screen=factory}));
end
Main.prototype = _hx_e();
Main.prototype.use_fixed_fit_projection= nil;
Main.prototype.init = function(self,_self) 
  require("randomlua");
  Main.DISPLAY_WIDTH = Std.parseInt(_G.sys.get_config("display.width"));
  Main.DISPLAY_HEIGHT = Std.parseInt(_G.sys.get_config("display.height"));
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _G.msg.post("@render:", self.use_fixed_fit_projection, _hx_o({__fields__={near=true,far=true},near=-1,far=1}));
  __meta_MetaScreen.EnterCommon();
end
Main.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == ScreenMessages.goto_screen then 
    if (_self.currentScreen ~= nil) then 
      _G.msg.post(_self.currentScreen, __defold_CollectionproxyMessages.disable);
      _G.msg.post(_self.currentScreen, __defold_CollectionproxyMessages.unload);
      _self.currentScreen = nil;
    end;
    _G.msg.post(message.screen, __defold_CollectionproxyMessages.async_load);
  elseif (message_id) == __defold_CollectionproxyMessages.proxy_loaded then 
    _self.currentScreen = sender;
    _G.msg.post(sender, __defold_CollectionproxyMessages.init);
    _G.msg.post(sender, __defold_CollectionproxyMessages.enable); end;
end

Main.prototype.__class__ =  Main
Main.__super__ = __defold_support_Script
setmetatable(Main.prototype,{__index=__defold_support_Script.prototype})

MainRes.new = {}
MainRes.__name__ = true

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.getProperty = function(o,field) 
  if (o == nil) then 
    do return nil end;
  else
    if ((o.__properties__ ~= nil) and (Reflect.field(o, Std.string("get_") .. Std.string(field)) ~= nil)) then 
      do return Reflect.callMethod(o,Reflect.field(o, Std.string("get_") .. Std.string(field)),_hx_tab_array({}, 0)) end;
    else
      do return Reflect.field(o, field) end;
    end;
  end;
end
Reflect.callMethod = function(o,func,args) 
  if ((args == nil) or (args.length == 0)) then 
    do return func(o) end;
  else
    local self_arg = false;
    if ((o ~= nil) and (o.__name__ == nil)) then 
      self_arg = true;
    end;
    if (self_arg) then 
      do return func(o, _hx_table.unpack(args, 0, args.length - 1)) end;
    else
      do return func(_hx_table.unpack(args, 0, args.length - 1)) end;
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end

ScreenMessages.new = {}
ScreenMessages.__name__ = true

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = _G.string.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^[ \t\r\n]*([%-+]*0[xX][%da-fA-F]*)");
  if (hexMatch ~= nil) then 
    local sign;
    local _g = _G.string.byte(hexMatch, 1);
    if (_g) == 43 then 
      sign = 1;
    elseif (_g) == 45 then 
      sign = -1;else
    sign = 0; end;
    local pos = (function() 
      local _hx_1
      if (sign == 0) then 
      _hx_1 = 2; else 
      _hx_1 = 3; end
      return _hx_1
    end )();
    local len = nil;
    len = #hexMatch;
    if (pos < 0) then 
      pos = #hexMatch + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return (function() 
      local _hx_2
      if (sign == -1) then 
      _hx_2 = -1; else 
      _hx_2 = 1; end
      return _hx_2
    end )() * _G.tonumber(_G.string.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_e();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do 
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  _G.table.insert(buf_b, Std.string(s));
  do return _G.table.concat(buf_b) end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do 
    local _g = 0;
    local _g1 = Reflect.fields(p);
    while (_g < _g1.length) do 
      local f = _g1[_g];
      _g = _g + 1;
      if (not Lambda.has(a, f)) then 
        a:push(f);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

__arena_ArenaAtlasRes.new = {}
__arena_ArenaAtlasRes.__name__ = true

__arena_ArenaLobbyWindowMessages.new = {}
__arena_ArenaLobbyWindowMessages.__name__ = true

__defold_support_GuiScript.new = function() 
  local self = _hx_new(__defold_support_GuiScript.prototype)
  __defold_support_GuiScript.super(self)
  return self
end
__defold_support_GuiScript.super = function(self) 
end
__defold_support_GuiScript.__name__ = true
__defold_support_GuiScript.prototype = _hx_e();
__defold_support_GuiScript.prototype.final_ = function(self,_self) 
end

__defold_support_GuiScript.prototype.__class__ =  __defold_support_GuiScript

__arena_ArenaLobbyWindow.new = function() 
  local self = _hx_new(__arena_ArenaLobbyWindow.prototype)
  __arena_ArenaLobbyWindow.super(self)
  return self
end
__arena_ArenaLobbyWindow.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__arena_ArenaLobbyWindow.__name__ = true
__arena_ArenaLobbyWindow.prototype = _hx_e();
__arena_ArenaLobbyWindow.prototype.init = function(self,_self) 
  _self.label = _G.gui.get_node(__arena_ArenaLobbyWindowRes.label);
end
__arena_ArenaLobbyWindow.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == __arena_ArenaLobbyWindowMessages.connected then 
    _G.gui.set_text(_self.label, "Search opponent");
  elseif (message_id) == __defold_GoMessages.disable then 
    _G.msg.post(".", __defold_GoMessages.release_input_focus);
  elseif (message_id) == __arena_ArenaLobbyWindowMessages.disconnected then 
    _G.gui.set_text(_self.label, "Disconnected");
  elseif (message_id) == __defold_GoMessages.enable then 
    _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  elseif (message_id) == __arena_ArenaLobbyWindowMessages.show then 
    _G.gui.set_text(_self.label, "Connecting..."); end;
end
__arena_ArenaLobbyWindow.prototype.on_input = function(self,_self,action_id,action) 
  do return true end
end

__arena_ArenaLobbyWindow.prototype.__class__ =  __arena_ArenaLobbyWindow
__arena_ArenaLobbyWindow.__super__ = __defold_support_GuiScript
setmetatable(__arena_ArenaLobbyWindow.prototype,{__index=__defold_support_GuiScript.prototype})

__arena_ArenaLobbyWindowRes.new = {}
__arena_ArenaLobbyWindowRes.__name__ = true
_hxClasses["arena.Enter"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Common","WS"},2)}
__arena_Enter = _hxClasses["arena.Enter"];
__arena_Enter.Common = _hx_tab_array({[0]="Common",0,__enum__ = __arena_Enter},2)

__arena_Enter.WS = function(url) local _x = _hx_tab_array({[0]="WS",1,url,__enum__=__arena_Enter}, 3); return _x; end 

__arena_stage_ArenaListener.new = {}
__arena_stage_ArenaListener.__name__ = true
__arena_stage_ArenaListener.prototype = _hx_e();
__arena_stage_ArenaListener.prototype.onResize= nil;
__arena_stage_ArenaListener.prototype.onBlockSpawned= nil;
__arena_stage_ArenaListener.prototype.onBlockDespawned= nil;
__arena_stage_ArenaListener.prototype.onBlockMoved= nil;
__arena_stage_ArenaListener.prototype.onPowerupActivated= nil;
__arena_stage_ArenaListener.prototype.onAppendScore= nil;
__arena_stage_ArenaListener.prototype.onMatched= nil;
__arena_stage_ArenaListener.prototype.onConnected= nil;
__arena_stage_ArenaListener.prototype.onDisconnected= nil;
__arena_stage_ArenaListener.prototype.onInGame= nil;
__arena_stage_ArenaListener.prototype.onCurrentRound= nil;
__arena_stage_ArenaListener.prototype.onCurrentTurn= nil;
__arena_stage_ArenaListener.prototype.onTurnTimeLeft= nil;
__arena_stage_ArenaListener.prototype.onRoomResult= nil;

__arena_stage_ArenaListener.prototype.__class__ =  __arena_stage_ArenaListener

__arena_ArenaScreen.new = function() 
  local self = _hx_new(__arena_ArenaScreen.prototype)
  __arena_ArenaScreen.super(self)
  return self
end
__arena_ArenaScreen.super = function(self) 
  __defold_support_Script.super(self);
end
__arena_ArenaScreen.__name__ = true
__arena_ArenaScreen.__interfaces__ = {__arena_stage_ArenaListener}
__arena_ArenaScreen.EnterCommon = function() 
  __arena_ArenaScreen.enter = __arena_Enter.Common;
  Main.gotoScreen(MainRes.screen_collection_proxy_arena);
end
__arena_ArenaScreen.EnterWs = function(url) 
  __arena_ArenaScreen.enter = __arena_Enter.WS(url);
  Main.gotoScreen(MainRes.screen_collection_proxy_arena);
end
__arena_ArenaScreen.prototype = _hx_e();
__arena_ArenaScreen.prototype.init = function(self,_self) 
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _self.windows = __gui_Windows.new(__arena_ArenaScreenRes.gui);
  _self.windows:register("lobby", __arena_ArenaScreenRes.window_lobby);
  _self.blocks = __haxe_ds_IntMap.new();
  local _g = __arena_ArenaScreen.enter;
  local tmp;
  local tmp1 = _g[1];
  if (tmp1) == 0 then 
    tmp = __arena_stage_Common.new();
  elseif (tmp1) == 1 then 
    tmp = __arena_stage_ArenaControllerWS.new(_g[2]); end;
  _self.controller = tmp;
  _self.arena = __arena_stage_Arena.Empty(_self, self, _self.controller);
  __arena_ArenaScreen.ArenaInst = _self.arena;
  _G.msg.post(_self.windows:show("lobby"), __arena_ArenaLobbyWindowMessages.show);
end
__arena_ArenaScreen.prototype.final_ = function(self,_self) 
  __arena_ArenaScreen.ArenaInst = nil;
end
__arena_ArenaScreen.prototype.update = function(self,_self,dt) 
  _self.arena:update(dt);
end
__arena_ArenaScreen.prototype.on_input = function(self,_self,action_id,action) 
  if (action_id == InputRes.touch) then 
    if (not action.pressed) then 
      do return true end;
    end;
    local arenaPos = _G.go.get_position(__arena_ArenaScreenRes.arena);
    local mousePos = Main.screen_to_viewport(action.screen_x, action.screen_y);
    local arenaX = Std.int((mousePos.x - arenaPos.x) / 92);
    local arenaY = Std.int((mousePos.y - arenaPos.y) / 92);
    if ((mousePos.x >= 0) and (mousePos.y >= 0)) then 
      _self.arena:touchCell(arenaX, arenaY);
    end;
  end;
  do return true end
end
__arena_ArenaScreen.prototype.onResize = function(self,_self,size) 
  local width = size * 92;
  _G.go.set_position(_G.vmath.vector3(width / 2, width / 2, 1), __arena_ArenaScreenRes.solid);
  _G.go.set_scale(width * 0.69565217391304346, __arena_ArenaScreenRes.solid);
  _G.go.set(__arena_ArenaScreenRes.solid_sprite, "tint", _G.vmath.vector4(0, 0, 0, 0.5));
end
__arena_ArenaScreen.prototype.onBlockSpawned = function(self,_self,block,reason) 
  local blockId = _G.factory.create(__arena_ArenaScreenRes.arena_block_factory);
  local _this = _self.blocks;
  local key = block.id;
  if (blockId == nil) then 
    _this.h[key] = __haxe_ds_IntMap.tnull;
  else
    _this.h[key] = blockId;
  end;
  _G.go.set_parent(blockId, __arena_ArenaScreenRes.arena);
  _G.msg.post(blockId, __arena_BlockViewMessages.setup, _hx_o({__fields__={block=true,reason=true},block=block,reason=reason}));
end
__arena_ArenaScreen.prototype.onBlockDespawned = function(self,_self,id) 
  local ret = _self.blocks.h[id];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local blockId = ret;
  if (blockId ~= nil) then 
    _G.msg.post(blockId, __arena_BlockViewMessages.remove);
  end;
end
__arena_ArenaScreen.prototype.onBlockMoved = function(self,_self,id,x,y) 
  local ret = _self.blocks.h[id];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local blockId = ret;
  if (blockId ~= nil) then 
    _G.msg.post(blockId, __arena_BlockViewMessages.move, _hx_o({__fields__={x=true,y=true},x=x,y=y}));
  end;
end
__arena_ArenaScreen.prototype.onPowerupActivated = function(self,_self,x,y,id) 
  local ret = _self.blocks.h[id];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  local blockId = ret;
  if (blockId ~= nil) then 
    _G.msg.post(blockId, __arena_BlockViewMessages.activate, _hx_o({__fields__={x=true,y=true},x=x,y=y}));
  end;
end
__arena_ArenaScreen.prototype.onAppendScore = function(self,_self,newScore,isMyScore) 
  _G.msg.post(__arena_ArenaScreenRes.gui, __arena_ArenaScreenGuiMessages.append_score, _hx_o({__fields__={score=true,isMy=true},score=newScore,isMy=isMyScore}));
end
__arena_ArenaScreen.prototype.onMatched = function(self,_self,x,y,score) 
end
__arena_ArenaScreen.prototype.onConnected = function(self,_self) 
  _G.msg.post(_self.windows:show("lobby"), __arena_ArenaLobbyWindowMessages.connected);
end
__arena_ArenaScreen.prototype.onDisconnected = function(self,_self) 
  __meta_MetaScreen.EnterDisconnected();
end
__arena_ArenaScreen.prototype.onInGame = function(self,_self,rounds,turnsInRount) 
  _self.windows:hide();
end
__arena_ArenaScreen.prototype.onCurrentRound = function(self,_self,teamId) 
end
__arena_ArenaScreen.prototype.onCurrentTurn = function(self,_self,teamId) 
  if (teamId == _self.controller:teamId()) then 
    _G.msg.post(__arena_ArenaScreenRes.solid, __defold_GoMessages.disable);
  else
    _G.msg.post(__arena_ArenaScreenRes.solid, __defold_GoMessages.enable);
  end;
end
__arena_ArenaScreen.prototype.onTurnTimeLeft = function(self,_self,left,total) 
  _G.msg.post(__arena_ArenaScreenRes.gui, __arena_ArenaScreenGuiMessages.time_left, _hx_o({__fields__={left=true,total=true},left=left,total=total}));
end
__arena_ArenaScreen.prototype.onRoomResult = function(self,_self,winnder,result) 
  __meta_MetaScreen.EnterResult(_self.controller:teamId() == winnder, result, _self.arena:me().score, _self.arena:oponent().score);
end

__arena_ArenaScreen.prototype.__class__ =  __arena_ArenaScreen
__arena_ArenaScreen.__super__ = __defold_support_Script
setmetatable(__arena_ArenaScreen.prototype,{__index=__defold_support_Script.prototype})

__arena_ArenaScreenGuiMessages.new = {}
__arena_ArenaScreenGuiMessages.__name__ = true

__arena_ArenaScreenGui.new = function() 
  local self = _hx_new(__arena_ArenaScreenGui.prototype)
  __arena_ArenaScreenGui.super(self)
  return self
end
__arena_ArenaScreenGui.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__arena_ArenaScreenGui.__name__ = true
__arena_ArenaScreenGui.prototype = _hx_e();
__arena_ArenaScreenGui.prototype.init = function(self,_self) 
  _self.timerText = _G.gui.get_node(__arena_ArenaScreenGuiRes.timerText);
  _self.timerFill = _G.gui.get_node(__arena_ArenaScreenGuiRes.timer_fill);
  _self.playerScore = _G.gui.get_node(__arena_ArenaScreenGuiRes.playerScore);
  _self.oponentScore = _G.gui.get_node(__arena_ArenaScreenGuiRes.oponentScore);
end
__arena_ArenaScreenGui.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == __arena_ArenaScreenGuiMessages.append_score then 
    if (message.isMy) then 
      _G.gui.set_text(_self.playerScore, Std.string(message.score));
    else
      _G.gui.set_text(_self.oponentScore, Std.string(message.score));
    end;
  elseif (message_id) == __arena_ArenaScreenGuiMessages.time_left then 
    _G.gui.set_text(_self.timerText, Std.string(message.left));
    _G.gui.animate(_self.timerFill, "size.x", 800 * (message.left / message.total), _G.gui.EASING_LINEAR, 1); end;
end

__arena_ArenaScreenGui.prototype.__class__ =  __arena_ArenaScreenGui
__arena_ArenaScreenGui.__super__ = __defold_support_GuiScript
setmetatable(__arena_ArenaScreenGui.prototype,{__index=__defold_support_GuiScript.prototype})

__arena_ArenaScreenGuiRes.new = {}
__arena_ArenaScreenGuiRes.__name__ = true

__arena_ArenaScreenRes.new = {}
__arena_ArenaScreenRes.__name__ = true

__arena_BlockViewMessages.new = {}
__arena_BlockViewMessages.__name__ = true

__arena_BlockView.new = function() 
  local self = _hx_new(__arena_BlockView.prototype)
  __arena_BlockView.super(self)
  return self
end
__arena_BlockView.super = function(self) 
  __defold_support_Script.super(self);
end
__arena_BlockView.__name__ = true
__arena_BlockView.prototype = _hx_e();
__arena_BlockView.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == __arena_BlockViewMessages.activate then 
    self:activate(_self, message.x, message.y);
  elseif (message_id) == __arena_BlockViewMessages.move then 
    local x = message.x;
    local y = message.y;
    if (_self.isCellLocked) then 
      _self.isCellLocked = false;
      __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
    end;
    _self.isCellLocked = true;
    _self.lockedCellX = x;
    _self.lockedCellY = y;
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, __arena_stage_ArenaConst.tileCenter(message.x, message.y, __arena_stage_Layer.Board), _G.go.EASING_LINEAR, 0.15, 0, _hx_bind(self,self.move_done));
  elseif (message_id) == __arena_BlockViewMessages.remove then 
    _G.go.delete();
  elseif (message_id) == __arena_BlockViewMessages.setup then 
    _self.block = _hx_funcToField(message.block);
    self:setSprite(_self, message.block.kind);
    local _g = message.reason;
    if (_g) == 0 then 
      _G.go.set_position(__arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y + 1, __arena_stage_Layer.Board));
      local x = message.block.x;
      local y = message.block.y;
      if (_self.isCellLocked) then 
        _self.isCellLocked = false;
        __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
      end;
      _self.isCellLocked = true;
      _self.lockedCellX = x;
      _self.lockedCellY = y;
      __arena_ArenaScreen.ArenaInst:lockCell(x, y);
      _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, __arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y, __arena_stage_Layer.Board), _G.go.EASING_LINEAR, 0.15, 0, _hx_bind(self,self.move_done));
    elseif (_g) == 1 then 
      _G.go.set_position(__arena_stage_ArenaConst.tileCenter(message.block.x, message.block.y, __arena_stage_Layer.Board)); end; end;
end
__arena_BlockView.prototype.move_done = function(self,_self,_,_1) 
  if (_self.isCellLocked) then 
    _self.isCellLocked = false;
    __arena_ArenaScreen.ArenaInst:unlockCell(_self.lockedCellX, _self.lockedCellY);
  end;
end
__arena_BlockView.prototype.setSprite = function(self,_self,kind) 
  local image;
  if (kind) == 1 then 
    image = __arena_ArenaAtlasRes.Jelly_1;
  elseif (kind) == 2 then 
    image = __arena_ArenaAtlasRes.Jelly_2;
  elseif (kind) == 3 then 
    image = __arena_ArenaAtlasRes.Jelly_3;
  elseif (kind) == 4 then 
    image = __arena_ArenaAtlasRes.Jelly_4;
  elseif (kind) == 5 then 
    image = __arena_ArenaAtlasRes.Jelly_5;
  elseif (kind) == 6 then 
    image = __arena_ArenaAtlasRes.Jelly_6;
  elseif (kind) == 7 then 
    image = __arena_ArenaAtlasRes.Rocket_Vert;
  elseif (kind) == 8 then 
    image = __arena_ArenaAtlasRes.Rocket_Hor;else
  do return end; end;
  _G.sprite.play_flipbook(__arena_BlockViewRes.sprite, image);
end
__arena_BlockView.prototype.activate = function(self,_self,x,y) 
  if ((_self.block.kind == 7) or (_self.block.kind == 8)) then 
    local r1 = _G.factory.create(__arena_BlockViewRes.factory_rocket);
    local r2 = _G.factory.create(__arena_BlockViewRes.factory_rocket);
    _G.go.set_parent(r1, __arena_ArenaScreenRes.arena);
    _G.go.set_parent(r2, __arena_ArenaScreenRes.arena);
    if (_self.block.kind == 8) then 
      _G.msg.post(r1, __arena_RocketMessages.setup, _hx_o({__fields__={x=true,y=true,dx=true,dy=true},x=x,y=y,dx=-1,dy=0}));
      _G.msg.post(r2, __arena_RocketMessages.setup, _hx_o({__fields__={x=true,y=true,dx=true,dy=true},x=x,y=y,dx=1,dy=0}));
    else
      _G.msg.post(r1, __arena_RocketMessages.setup, _hx_o({__fields__={x=true,y=true,dx=true,dy=true},x=x,y=y,dx=0,dy=-1}));
      _G.msg.post(r2, __arena_RocketMessages.setup, _hx_o({__fields__={x=true,y=true,dx=true,dy=true},x=x,y=y,dx=0,dy=1}));
    end;
  else
    _G.error(__haxe_Exception.thrown(Std.string("Can't activate ") .. Std.string(_self.block.kind)),0);
  end;
end

__arena_BlockView.prototype.__class__ =  __arena_BlockView
__arena_BlockView.__super__ = __defold_support_Script
setmetatable(__arena_BlockView.prototype,{__index=__defold_support_Script.prototype})

__arena_BlockViewRes.new = {}
__arena_BlockViewRes.__name__ = true

__arena_RocketMessages.new = {}
__arena_RocketMessages.__name__ = true

__arena_RocketView.new = function() 
  local self = _hx_new(__arena_RocketView.prototype)
  __arena_RocketView.super(self)
  return self
end
__arena_RocketView.super = function(self) 
  __defold_support_Script.super(self);
end
__arena_RocketView.__name__ = true
__arena_RocketView.prototype = _hx_e();
__arena_RocketView.prototype.init = function(self,_self) 
  _self.cells = _hx_tab_array({}, 0);
end
__arena_RocketView.prototype.update = function(self,_self,dt) 
  local pos = _G.go.get_position();
  local d = Std.int(_G.math.sqrt(_G.math.pow(pos.x - _self.x, 2) + _G.math.pow(pos.y - _self.y, 2)) / 92);
  if (d > 8) then 
    _G.go.delete();
  end;
  local _g = 0;
  local _g1 = Std.int(_G.math.min(8, d));
  local _hx_continue_1 = false;
  while (_g < _g1) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    if (_self.cells[i] == nil) then 
      break;
    end;
    local cell = _self.cells[i];
    _self.cells[i] = nil;
    __haxe_Log.trace(cell, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/arena/RocketView.hx",lineNumber=36,className="arena.RocketView",methodName="update"}));
    __arena_ArenaScreen.ArenaInst:unlockCell(cell.x, cell.y);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
__arena_RocketView.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id == __arena_RocketMessages.setup) then 
    local pos = __arena_stage_ArenaConst.tileCenter(message.x, message.y, __arena_stage_Layer.OverBoard);
    _self.x = pos.x;
    _self.y = pos.y;
    _G.go.set_position(pos);
    _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, __arena_stage_ArenaConst.tileCenter(message.x + (8 * message.dx), message.y + (8 * message.dy), __arena_stage_Layer.OverBoard), _G.go.EASING_INCUBIC, 1);
    local x = message.x + message.dx;
    local y = message.y + message.dy;
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (2 * message.dx);
    local y = message.y + (2 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (3 * message.dx);
    local y = message.y + (3 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (4 * message.dx);
    local y = message.y + (4 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (5 * message.dx);
    local y = message.y + (5 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (6 * message.dx);
    local y = message.y + (6 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
    local x = message.x + (7 * message.dx);
    local y = message.y + (7 * message.dy);
    _self.cells:push(_hx_o({__fields__={x=true,y=true},x=x,y=y}));
    __arena_ArenaScreen.ArenaInst:lockCell(x, y);
  end;
end

__arena_RocketView.prototype.__class__ =  __arena_RocketView
__arena_RocketView.__super__ = __defold_support_Script
setmetatable(__arena_RocketView.prototype,{__index=__defold_support_Script.prototype})

__arena_stage_Arena.new = function(stage,_self,listener,controller) 
  local self = _hx_new(__arena_stage_Arena.prototype)
  __arena_stage_Arena.super(self,stage,_self,listener,controller)
  return self
end
__arena_stage_Arena.super = function(self,stage,_self,listener,controller) 
  self._requestForUpdateState = true;
  self._state = 0;
  self._cellsContextToClean = _hx_tab_array({}, 0);
  self._cellsToClean = _hx_tab_array({}, 0);
  self._lockForUpdate = false;
  self._cellsLocks = 0;
  self._stage = stage;
  self._self = _self;
  self._listener = listener;
  self._controller = controller;
  local size = self._stage.size;
  self._cells = Array.new();
  local _g = 0;
  while (_g < size) do 
    _g = _g + 1;
    local row = Array.new();
    self._cells:push(row);
    local _g = 0;
    while (_g < size) do 
      _g = _g + 1;
      row:push(_hx_o({__fields__={lock=true},lock=0}));
    end;
  end;
  self._listener:onResize(self._self, self._stage.size);
end
__arena_stage_Arena.__name__ = true
__arena_stage_Arena.Empty = function(_self,listener,controller) 
  do return __arena_stage_Arena.new(_hx_o({__fields__={identity=true,size=true,cells=true,player1=true,player2=true},identity=0,size=8,cells=__arena_stage_CellsExt.Empty(8),player1=_hx_o({__fields__={score=true},score=0}),player2=_hx_o({__fields__={score=true},score=0})}), _self, listener, controller) end;
end
__arena_stage_Arena.prototype = _hx_e();
__arena_stage_Arena.prototype._stage= nil;
__arena_stage_Arena.prototype._cellsLocks= nil;
__arena_stage_Arena.prototype._lockForUpdate= nil;
__arena_stage_Arena.prototype._cells= nil;
__arena_stage_Arena.prototype._cellsToClean= nil;
__arena_stage_Arena.prototype._cellsContextToClean= nil;
__arena_stage_Arena.prototype._state= nil;
__arena_stage_Arena.prototype._requestForUpdateState= nil;
__arena_stage_Arena.prototype._self= nil;
__arena_stage_Arena.prototype._listener= nil;
__arena_stage_Arena.prototype._controller= nil;
__arena_stage_Arena.prototype._random= nil;
__arena_stage_Arena.prototype._timeoutHappened= nil;
__arena_stage_Arena.prototype._roundTime= nil;
__arena_stage_Arena.prototype._roundStart= nil;
__arena_stage_Arena.prototype._lastTimeLeft= nil;
__arena_stage_Arena.prototype.getId = function(self) 
  local tmp = (function() 
  local _hx_obj = self._stage;
  local _hx_fld = 'identity';
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _hx_obj[_hx_fld];
   end)();
  do return tmp end
end
__arena_stage_Arena.prototype.randomIntRange = function(self,min,max) 
  do return self._random:next(min, max) end
end
__arena_stage_Arena.prototype.peekRandom = function(self,array) 
  if (array.length == 0) then 
    _G.error(__haxe_Exception.thrown("Empty array"),0);
  end;
  do return array[self:randomIntRange(0, array.length - 1)] end
end
__arena_stage_Arena.prototype.update = function(self,dt) 
  if (not self._controller:inGame()) then 
    self:handleInput();
    do return end;
  end;
  if (not self._lockForUpdate and (self._cellsLocks == 0)) then 
    self:handleInput();
  end;
  self:handleTimeLeft();
  self:handleCleanCells();
  self:handleGenerateBlocks();
  self:handleEmptyCells();
  if ((self._requestForUpdateState and not self._lockForUpdate) and (self._cellsLocks == 0)) then 
    self._requestForUpdateState = false;
    self._state = self._state + 1;
    self._controller:sendHash(self._state, self._state);
  end;
  self._lockForUpdate = false;
end
__arena_stage_Arena.prototype.handleInput = function(self) 
  local _g = self._controller:readInput();
  local tmp = _g[1];
  if (tmp) == 0 then 
  elseif (tmp) == 1 then 
    self._listener:onConnected(self._self);
  elseif (tmp) == 2 then 
    self._listener:onDisconnected(self._self);
  elseif (tmp) == 3 then 
    self._random = __common_Random.new(_g[2]);
    self._listener:onInGame(self._self, _g[3], _g[4]);
  elseif (tmp) == 4 then 
    self:touchCellInternal(_g[2], _g[3]);
  elseif (tmp) == 5 then 
    local _g1 = _g[2];
    local _g = _g[3];
    self._roundTime = _g;
    self._roundStart = _G.os.clock();
    self._lastTimeLeft = _g;
    self._timeoutHappened = false;
    self._listener:onCurrentRound(self._self, _g1);
    self._listener:onCurrentTurn(self._self, _g1);
    self._listener:onTurnTimeLeft(self._self, _g, _g);
  elseif (tmp) == 6 then 
    self._listener:onCurrentTurn(self._self, _g[2]);
  elseif (tmp) == 7 then 
    self._listener:onRoomResult(self._self, _g[2], _g[3]); end;
end
__arena_stage_Arena.prototype.player = function(self,index) 
  if (index) == 1 then 
    do return self._stage.player1 end;
  elseif (index) == 2 then 
    do return self._stage.player2 end; end;
  _G.error(__haxe_Exception.thrown("Wrong index"),0);
end
__arena_stage_Arena.prototype.me = function(self) 
  if (self._controller:teamId() == 1) then 
    do return self._stage.player1 end;
  end;
  do return self._stage.player2 end
end
__arena_stage_Arena.prototype.oponent = function(self) 
  if (self._controller:teamId() == 1) then 
    do return self._stage.player2 end;
  end;
  do return self._stage.player1 end
end
__arena_stage_Arena.prototype.spawnBlock = function(self,x,y,kind,reason) 
  if (self._stage.cells[y][x].block ~= nil) then 
    self._listener:onBlockDespawned(self._self, self._stage.cells[y][x].block.id);
  end;
  local tmp = self._stage.cells[y];
  local tmp1 = self:getId();
  tmp[x].block = _hx_o({__fields__={id=true,x=true,y=true,kind=true},id=tmp1,x=x,y=y,kind=kind});
  self._listener:onBlockSpawned(self._self, self._stage.cells[y][x].block, reason);
end
__arena_stage_Arena.prototype.lockCell = function(self,x,y) 
  local lastCell = self._stage.size - 1;
  if ((((x < 0) or (y < 0)) or (x > lastCell)) or (y > lastCell)) then 
    do return end;
  end;
  local fh = self._cells[y][x];
  fh.lock = fh.lock + 1;
  self._cellsLocks = self._cellsLocks + 1;
end
__arena_stage_Arena.prototype.unlockCell = function(self,x,y) 
  local lastCell = self._stage.size - 1;
  if ((((x < 0) or (y < 0)) or (x > lastCell)) or (y > lastCell)) then 
    do return end;
  end;
  local fh = self._cells[y][x];
  fh.lock = fh.lock - 1;
  self._cellsLocks = self._cellsLocks - 1;
end
__arena_stage_Arena.prototype.touchCell = function(self,x,y) 
  if (not self._controller:myTurn()) then 
    do return end;
  end;
  if (not ((((x > 0) and (y > 0)) and (x < self._stage.size)) and (y < self._stage.size))) then 
    do return end;
  end;
  self._controller:touch(x, y);
  self:touchCellInternal(x, y);
end
__arena_stage_Arena.prototype.touchCellInternal = function(self,x,y) 
  if (self._cellsLocks > 0) then 
    do return end;
  end;
  local size = self._stage.size;
  local cells = self._stage.cells;
  if ((((x < 0) or (y < 0)) or (x >= size)) or (y >= size)) then 
    do return end;
  end;
  local cell = self._stage.cells[y][x];
  if (cell.block == nil) then 
    do return end;
  end;
  self._requestForUpdateState = true;
  self._lockForUpdate = true;
  if ((cell.block.kind == 7) or (cell.block.kind == 8)) then 
    self:activateRocket(x, y, cell);
    do return end;
  end;
  local xStack = _hx_tab_array({[0]=x}, 1);
  local yStack = _hx_tab_array({[0]=y}, 1);
  local score = 0;
  local _hx_continue_1 = false;
  while (xStack.length > 0) do repeat 
    local sx = xStack:pop();
    local sy = yStack:pop();
    local block = _hx_tab_array({[0]=cells[sy][sx].block}, 1);
    if (block[0] == nil) then 
      break;
    end;
    cells[sy][sx].block = nil;
    self._listener:onBlockDespawned(self._self, block[0].id);
    score = score + 1;
    local consumer = (function(block) 
      do return function(bx,by,cell) 
        if (cell.block.kind == block[0].kind) then 
          xStack:push(bx);
          yStack:push(by);
        end;
      end end;
    end)(block);
    local cells = self._stage.cells;
    local last = self._stage.size - 1;
    if (sx > 0) then 
      local cell = cells[sy][sx - 1];
      if (cell.block ~= nil) then 
        consumer(sx - 1, sy, cell);
      end;
    end;
    if (sy > 0) then 
      local cell = cells[sy - 1][sx];
      if (cell.block ~= nil) then 
        consumer(sx, sy - 1, cell);
      end;
    end;
    if (sx < last) then 
      local cell = cells[sy][sx + 1];
      if (cell.block ~= nil) then 
        consumer(sx + 1, sy, cell);
      end;
    end;
    if (sy < last) then 
      local cell = cells[sy + 1][sx];
      if (cell.block ~= nil) then 
        consumer(sx, sy + 1, cell);
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  self._listener:onMatched(self._self, x, y, score);
  self:handleMatch(x, y, score);
end
__arena_stage_Arena.prototype.activateRocket = function(self,x,y,rocketCell) 
  __haxe_Log.trace("ACT", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/arena/stage/Arena.hx",lineNumber=301,className="arena.stage.Arena",methodName="activateRocket"}));
  local rocketBlock = rocketCell.block;
  rocketCell.block = nil;
  self._listener:onPowerupActivated(self._self, x, y, rocketBlock.id);
  self._listener:onBlockDespawned(self._self, rocketBlock.id);
  if (rocketBlock.kind == 8) then 
    local _g = 0;
    local _g1 = self._stage.size;
    local _hx_continue_1 = false;
    while (_g < _g1) do repeat 
      _g = _g + 1;
      local i = _g - 1;
      if (i == x) then 
        break;
      end;
      self._cellsToClean:push(self._stage.cells[y][i]);
      self._cellsContextToClean:push(self._cells[y][i]);until true
      if _hx_continue_1 then 
      _hx_continue_1 = false;
      break;
      end;
      
    end;
  else
    if (rocketBlock.kind == 7) then 
      local _g = 0;
      local _g1 = self._stage.size;
      local _hx_continue_1 = false;
      while (_g < _g1) do repeat 
        _g = _g + 1;
        local i = _g - 1;
        if (i == y) then 
          break;
        end;
        self._cellsToClean:push(self._stage.cells[i][x]);
        self._cellsContextToClean:push(self._cells[i][x]);until true
        if _hx_continue_1 then 
        _hx_continue_1 = false;
        break;
        end;
        
      end;
    end;
  end;
  self._requestForUpdateState = true;
  self._lockForUpdate = true;
end
__arena_stage_Arena.prototype.handleMatch = function(self,x,y,score) 
  local p = self:player(self._controller:currentTeamId());
  p.score = p.score + score;
  self._listener:onAppendScore(self._self, p.score, self._controller:currentTeamId() == self._controller:teamId());
  if (self._controller:currentTeamId() == self._controller:teamId()) then 
    self._controller:setScore(self._controller:currentTeamId(), p.score);
  end;
  if (score < 5) then 
    self:spawnBlock(x, y, self:peekRandom(__arena_stage_Arena.Rockets), 1);
  end;
end
__arena_stage_Arena.prototype.handleTimeLeft = function(self) 
  if (self._lastTimeLeft == nil) then 
    do return end;
  end;
  local timeLeft = self._roundTime - Std.int(_G.os.clock() - self._roundStart);
  if (timeLeft >= 0) then 
    if (timeLeft ~= self._lastTimeLeft) then 
      self._lastTimeLeft = timeLeft;
      self._listener:onTurnTimeLeft(self._self, timeLeft, self._roundTime);
    end;
  else
    if (not self._timeoutHappened) then 
      self._timeoutHappened = true;
      self._controller:timeOut();
    end;
  end;
end
__arena_stage_Arena.prototype.handleCleanCells = function(self) 
  if (self._cellsToClean.length == 0) then 
    do return end;
  end;
  local hasLocked = false;
  local score = 0;
  local _g = 0;
  local _g1 = self._cellsToClean.length;
  local _hx_continue_1 = false;
  while (_g < _g1) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local cell = self._cellsToClean[i];
    if ((cell == nil) or (cell.block == nil)) then 
      break;
    end;
    if (self._cellsContextToClean[i].lock > 0) then 
      hasLocked = true;
      break;
    end;
    local block = cell.block;
    cell.block = nil;
    self._cellsToClean[i] = nil;
    self._cellsContextToClean[i] = nil;
    self._listener:onBlockDespawned(self._self, block.id);
    score = score + 1;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (not hasLocked) then 
    self._cellsToClean:resize(0);
    self._cellsContextToClean:resize(0);
  end;
  if (score > 0) then 
    local p = self:player(self._controller:currentTeamId());
    p.score = p.score + score;
    self._listener:onAppendScore(self._self, p.score, self._controller:currentTeamId() == self._controller:teamId());
  end;
end
__arena_stage_Arena.prototype.handleGenerateBlocks = function(self) 
  local size = self._stage.size;
  local top = size - 1;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < size) do repeat 
    _g = _g + 1;
    local x = _g - 1;
    if (self._cells[top][x].lock ~= 0) then 
      break;
    end;
    if (self._stage.cells[top][x].block ~= nil) then 
      break;
    end;
    self._lockForUpdate = true;
    self:spawnBlock(x, top, self:peekRandom(__arena_stage_Arena.Colors), 0);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
__arena_stage_Arena.prototype.handleEmptyCells = function(self) 
  local size = self._stage.size;
  local cells = self._stage.cells;
  local _g = 1;
  while (_g < size) do 
    _g = _g + 1;
    local y = _g - 1;
    local _g = 0;
    local _hx_continue_2 = false;
    while (_g < size) do repeat 
      _g = _g + 1;
      local x = _g - 1;
      if (self._cells[y][x].lock ~= 0) then 
        break;
      end;
      if ((cells[y][x].block == nil) or (cells[y - 1][x].block ~= nil)) then 
        break;
      end;
      self._lockForUpdate = true;
      local block = cells[y][x].block;
      block.x = x;
      block.y = y - 1;
      cells[y - 1][x].block = block;
      cells[y][x].block = nil;
      self._listener:onBlockMoved(self._self, block.id, x, y - 1);until true
      if _hx_continue_2 then 
      _hx_continue_2 = false;
      break;
      end;
      
    end;
  end;
end

__arena_stage_Arena.prototype.__class__ =  __arena_stage_Arena
_hxClasses["arena.stage.Layer"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Cell","Board","OverBoard"},3)}
__arena_stage_Layer = _hxClasses["arena.stage.Layer"];
__arena_stage_Layer.Cell = _hx_tab_array({[0]="Cell",0,__enum__ = __arena_stage_Layer},2)

__arena_stage_Layer.Board = _hx_tab_array({[0]="Board",1,__enum__ = __arena_stage_Layer},2)

__arena_stage_Layer.OverBoard = _hx_tab_array({[0]="OverBoard",2,__enum__ = __arena_stage_Layer},2)


__arena_stage_ArenaConst.new = {}
__arena_stage_ArenaConst.__name__ = true
__arena_stage_ArenaConst.tileCenter = function(x,y,layer) 
  local z;
  local z1 = layer[1];
  if (z1) == 0 then 
    z = -0.5;
  elseif (z1) == 1 then 
    z = 0;
  elseif (z1) == 2 then 
    z = 0.5; end;
  do return _G.vmath.vector3((x * 92) + 46., (y * 92) + 46., z) end;
end
_hxClasses["arena.stage.Input"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="None","Connected","Disconnected","InGame","Touch","CurrentRound","CurrentTurn","RoomResult"},8)}
__arena_stage_Input = _hxClasses["arena.stage.Input"];
__arena_stage_Input.None = _hx_tab_array({[0]="None",0,__enum__ = __arena_stage_Input},2)

__arena_stage_Input.Connected = _hx_tab_array({[0]="Connected",1,__enum__ = __arena_stage_Input},2)

__arena_stage_Input.Disconnected = _hx_tab_array({[0]="Disconnected",2,__enum__ = __arena_stage_Input},2)

__arena_stage_Input.InGame = function(seed,rounds,turnsInRount) local _x = _hx_tab_array({[0]="InGame",3,seed,rounds,turnsInRount,__enum__=__arena_stage_Input}, 5); return _x; end 
__arena_stage_Input.Touch = function(x,y) local _x = _hx_tab_array({[0]="Touch",4,x,y,__enum__=__arena_stage_Input}, 4); return _x; end 
__arena_stage_Input.CurrentRound = function(teamId,turnTime) local _x = _hx_tab_array({[0]="CurrentRound",5,teamId,turnTime,__enum__=__arena_stage_Input}, 4); return _x; end 
__arena_stage_Input.CurrentTurn = function(teamId) local _x = _hx_tab_array({[0]="CurrentTurn",6,teamId,__enum__=__arena_stage_Input}, 3); return _x; end 
__arena_stage_Input.RoomResult = function(winnder,result) local _x = _hx_tab_array({[0]="RoomResult",7,winnder,result,__enum__=__arena_stage_Input}, 4); return _x; end 

__arena_stage_ArenaController.new = {}
__arena_stage_ArenaController.__name__ = true
__arena_stage_ArenaController.prototype = _hx_e();
__arena_stage_ArenaController.prototype.inGame= nil;
__arena_stage_ArenaController.prototype.teamId= nil;
__arena_stage_ArenaController.prototype.currentTeamId= nil;
__arena_stage_ArenaController.prototype.myTurn= nil;
__arena_stage_ArenaController.prototype.touch= nil;
__arena_stage_ArenaController.prototype.setScore= nil;
__arena_stage_ArenaController.prototype.timeOut= nil;
__arena_stage_ArenaController.prototype.readInput= nil;
__arena_stage_ArenaController.prototype.sendHash= nil;

__arena_stage_ArenaController.prototype.__class__ =  __arena_stage_ArenaController

__arena_stage_Common.new = function() 
  local self = _hx_new(__arena_stage_Common.prototype)
  __arena_stage_Common.super(self)
  return self
end
__arena_stage_Common.super = function(self) 
  self._round = 1;
  self._turn = 0;
  self._inGame = false;
  self._inputQueue = Array.new();
  self._inputQueue:push(__arena_stage_Input.Connected);
  self._inputQueue:push(__arena_stage_Input.InGame(0, 0, 0));
  self._inputQueue:push(__arena_stage_Input.CurrentRound(1, 15));
end
__arena_stage_Common.__name__ = true
__arena_stage_Common.__interfaces__ = {__arena_stage_ArenaController}
__arena_stage_Common.prototype = _hx_e();
__arena_stage_Common.prototype._inputQueue= nil;
__arena_stage_Common.prototype._inGame= nil;
__arena_stage_Common.prototype._turn= nil;
__arena_stage_Common.prototype._round= nil;
__arena_stage_Common.prototype.inGame = function(self) 
  do return self._inGame end
end
__arena_stage_Common.prototype.teamId = function(self) 
  do return 1 end
end
__arena_stage_Common.prototype.currentTeamId = function(self) 
  do return 1 end
end
__arena_stage_Common.prototype.myTurn = function(self) 
  do return true end
end
__arena_stage_Common.prototype.touch = function(self,x,y) 
  self._turn = self._turn + 1;
  if (self._turn < 3) then 
    self._inputQueue:push(__arena_stage_Input.CurrentTurn(1));
    do return end;
  end;
  self._turn = 0;
  self._round = self._round + 1;
  if (self._round < 4) then 
    self._inputQueue:push(__arena_stage_Input.CurrentRound(1, 15));
  else
    self._inputQueue:push(__arena_stage_Input.RoomResult(1, 1));
  end;
end
__arena_stage_Common.prototype.setScore = function(self,teamId,score) 
end
__arena_stage_Common.prototype.timeOut = function(self) 
  self._inputQueue:push(__arena_stage_Input.CurrentRound(1, 15));
end
__arena_stage_Common.prototype.readInput = function(self) 
  if (self._inputQueue.length ~= 0) then 
    local msg = self._inputQueue:shift();
    if (msg ~= nil) then 
      if (msg[1] == 3) then 
        self._inGame = true;
      end;
    end;
    do return msg end;
  end;
  do return __arena_stage_Input.None end
end
__arena_stage_Common.prototype.sendHash = function(self,turn,hash) 
end

__arena_stage_Common.prototype.__class__ =  __arena_stage_Common

__arena_stage_ArenaControllerWS.new = function(url) 
  local self = _hx_new(__arena_stage_ArenaControllerWS.prototype)
  __arena_stage_ArenaControllerWS.super(self,url)
  return self
end
__arena_stage_ArenaControllerWS.super = function(self,url) 
  self._inputQueue = Array.new();
  self._seed = 0;
  self._currentTeamId = 0;
  self._activeTeamId = 0;
  self._teamId = 0;
  local _gthis = self;
  self._conn = websocket.connect(url, _hx_e(), function(_,conn,data) 
    local _g = data.event;
    if (_g) == 0 then 
      _gthis._inputQueue:push(__arena_stage_Input.Connected);
      websocket.send(conn, "{\"command\":\"handshake\"}");
      _gthis._connected = true;
    elseif (_g) == 1 then 
      _gthis._inputQueue:push(__arena_stage_Input.Disconnected);
      _gthis._connected = false;
    elseif (_g) == 2 then 
      _gthis:handleMessage(_G.json.decode(data.message));
    elseif (_g) == 3 then  end;
  end);
end
__arena_stage_ArenaControllerWS.__name__ = true
__arena_stage_ArenaControllerWS.__interfaces__ = {__arena_stage_ArenaController}
__arena_stage_ArenaControllerWS.prototype = _hx_e();
__arena_stage_ArenaControllerWS.prototype._conn= nil;
__arena_stage_ArenaControllerWS.prototype._connected= nil;
__arena_stage_ArenaControllerWS.prototype._inGame= nil;
__arena_stage_ArenaControllerWS.prototype._teamId= nil;
__arena_stage_ArenaControllerWS.prototype._activeTeamId= nil;
__arena_stage_ArenaControllerWS.prototype._currentTeamId= nil;
__arena_stage_ArenaControllerWS.prototype._seed= nil;
__arena_stage_ArenaControllerWS.prototype._inputQueue= nil;
__arena_stage_ArenaControllerWS.prototype.teamId = function(self) 
  do return self._teamId end
end
__arena_stage_ArenaControllerWS.prototype.currentTeamId = function(self) 
  do return self._currentTeamId end
end
__arena_stage_ArenaControllerWS.prototype.inGame = function(self) 
  do return self._inGame end
end
__arena_stage_ArenaControllerWS.prototype.myTurn = function(self) 
  do return self._teamId == self._activeTeamId end
end
__arena_stage_ArenaControllerWS.prototype.touch = function(self,x,y) 
  self._activeTeamId = 0;
  self:send("touch", _hx_o({__fields__={x=true,y=true},x=x,y=y}));
end
__arena_stage_ArenaControllerWS.prototype.setScore = function(self,teamId,score) 
  self:send("score", _hx_o({__fields__={teamId=true,score=true},teamId=teamId,score=score}));
end
__arena_stage_ArenaControllerWS.prototype.timeOut = function(self) 
  self._activeTeamId = 0;
  self:send("timeout");
end
__arena_stage_ArenaControllerWS.prototype.readInput = function(self) 
  if (self._inputQueue.length ~= 0) then 
    do return self._inputQueue:shift() end;
  end;
  do return __arena_stage_Input.None end
end
__arena_stage_ArenaControllerWS.prototype.sendHash = function(self,turn,hash) 
  self:send("hash", _hx_o({__fields__={hash=true},hash=hash}));
end
__arena_stage_ArenaControllerWS.prototype.send = function(self,command,data) 
  websocket.send(self._conn, __haxe_Json.stringify(_hx_o({__fields__={command=true},command=command})));
  if (data ~= nil) then 
    websocket.send(self._conn, __haxe_Json.stringify(data));
  end;
end
__arena_stage_ArenaControllerWS.prototype.handleMessage = function(self,data) 
  local _g = Reflect.getProperty(data, "command");
  if (_g) == "currentRound" then 
    self._currentTeamId = Reflect.getProperty(data, "teamId");
    self._activeTeamId = self._currentTeamId;
    local turnTime = Reflect.getProperty(data, "turnTime");
    self._inputQueue:push(__arena_stage_Input.CurrentRound(self._currentTeamId, turnTime));
  elseif (_g) == "currentTurn" then 
    self._activeTeamId = Reflect.getProperty(data, "teamId");
    self._inputQueue:push(__arena_stage_Input.CurrentTurn(self._currentTeamId));
  elseif (_g) == "roomResult" then 
    local winner = Reflect.getProperty(data, "winner");
    local result = Reflect.getProperty(data, "result");
    self._inputQueue:push(__arena_stage_Input.RoomResult(winner, result));
  elseif (_g) == "startGame" then 
    self._inGame = true;
    self._seed = Reflect.getProperty(data, "seed");
    self._teamId = Reflect.getProperty(data, "teamId");
    local rounds = Reflect.getProperty(data, "rounds");
    local turnsForRound = Reflect.getProperty(data, "turnsForRound");
    self._currentTeamId = 1;
    self._inputQueue:push(__arena_stage_Input.InGame(self._seed, rounds, turnsForRound));
  elseif (_g) == "touch" then 
    local x = Reflect.getProperty(data, "x");
    local y = Reflect.getProperty(data, "y");
    self._inputQueue:push(__arena_stage_Input.Touch(x, y)); end;
end

__arena_stage_ArenaControllerWS.prototype.__class__ =  __arena_stage_ArenaControllerWS

__arena_stage_CellsExt.new = {}
__arena_stage_CellsExt.__name__ = true
__arena_stage_CellsExt.Empty = function(size) 
  local result = Array.new();
  local _g = 0;
  while (_g < size) do 
    _g = _g + 1;
    local row = Array.new();
    result:push(row);
    local _g = 0;
    while (_g < size) do 
      _g = _g + 1;
      row:push(_hx_o({__fields__={block=true},block=nil}));
    end;
  end;
  do return result end;
end

__common_Random.new = function(seed) 
  local self = _hx_new(__common_Random.prototype)
  __common_Random.super(self,seed)
  return self
end
__common_Random.super = function(self,seed) 
  self._generator = _G.mwc(seed, "mvc");
end
__common_Random.__name__ = true
__common_Random.prototype = _hx_e();
__common_Random.prototype._generator= nil;
__common_Random.prototype.next = function(self,min,max) 
  do return self._generator:random(min, max) end
end

__common_Random.prototype.__class__ =  __common_Random

__defold_CollectionproxyMessages.new = {}
__defold_CollectionproxyMessages.__name__ = true

__defold_GoMessages.new = {}
__defold_GoMessages.__name__ = true

__meta_MetaScreen.new = function() 
  local self = _hx_new(__meta_MetaScreen.prototype)
  __meta_MetaScreen.super(self)
  return self
end
__meta_MetaScreen.super = function(self) 
  __defold_support_Script.super(self);
end
__meta_MetaScreen.__name__ = true
__meta_MetaScreen.EnterCommon = function() 
  __meta_MetaScreen.Enter = __meta_Enter.Common;
  Main.gotoScreen(MainRes.screen_collection_proxy_meta);
end
__meta_MetaScreen.EnterDisconnected = function() 
  __meta_MetaScreen.Enter = __meta_Enter.Disconnected;
  Main.gotoScreen(MainRes.screen_collection_proxy_meta);
end
__meta_MetaScreen.EnterResult = function(winnder,result,score,oponentScore) 
  __meta_MetaScreen.Enter = __meta_Enter.Result(winnder, result, score, oponentScore);
  Main.gotoScreen(MainRes.screen_collection_proxy_meta);
end
__meta_MetaScreen.HideWindows = function() 
  __meta_MetaScreen.Instance.windows:hide();
end
__meta_MetaScreen.prototype = _hx_e();
__meta_MetaScreen.prototype.init = function(self,_self) 
  _self.windows = __gui_Windows.new(__meta_MetaScreenRes.gui);
  _self.windows:register("result", __meta_MetaScreenRes.resultMessage);
  __meta_MetaScreen.Instance = _self;
  local _g = __meta_MetaScreen.Enter;
  local tmp = _g[1];
  if (tmp) == 0 then 
  elseif (tmp) == 1 then 
  elseif (tmp) == 2 then 
    self:showResultWindow(_self, _g[2], _g[3], _g[4], _g[5]); end;
end
__meta_MetaScreen.prototype.final_ = function(self,_self) 
  __meta_MetaScreen.Instance = nil;
end
__meta_MetaScreen.prototype.showResultWindow = function(self,_self,winnder,result,score,oponentScore) 
  _G.msg.post(_self.windows:show("result"), __meta_MetaResultMessageGuiMessages.setup, _hx_o({__fields__={winnder=true,result=true,score=true,oponentScore=true},winnder=winnder,result=result,score=score,oponentScore=oponentScore}));
end

__meta_MetaScreen.prototype.__class__ =  __meta_MetaScreen
__meta_MetaScreen.__super__ = __defold_support_Script
setmetatable(__meta_MetaScreen.prototype,{__index=__defold_support_Script.prototype})

__meta_MetaResultMessageGui.new = function() 
  local self = _hx_new(__meta_MetaResultMessageGui.prototype)
  __meta_MetaResultMessageGui.super(self)
  return self
end
__meta_MetaResultMessageGui.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__meta_MetaResultMessageGui.__name__ = true
__meta_MetaResultMessageGui.prototype = _hx_e();
__meta_MetaResultMessageGui.prototype.init = function(self,_self) 
  _G.gui.set_render_order(1);
  _self.gui = __gui_GUI.new(InputRes.touch, "ResultWindow", 1);
  _self.gui:buttonUpDown("success", true):OnClickHandle(function() 
    __meta_MetaScreen.HideWindows();
  end);
end
__meta_MetaResultMessageGui.prototype.final_ = function(self,_self) 
  __defold_support_GuiScript.prototype.final_(self,_self);
end
__meta_MetaResultMessageGui.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == __defold_GoMessages.disable then 
    _G.msg.post(".", __defold_GoMessages.release_input_focus);
  elseif (message_id) == __defold_GoMessages.enable then 
    _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  elseif (message_id) == __meta_MetaResultMessageGuiMessages.setup then  end;
end
__meta_MetaResultMessageGui.prototype.on_input = function(self,_self,action_id,action) 
  _self.gui:on_input(action_id, action);
  do return true end
end

__meta_MetaResultMessageGui.prototype.__class__ =  __meta_MetaResultMessageGui
__meta_MetaResultMessageGui.__super__ = __defold_support_GuiScript
setmetatable(__meta_MetaResultMessageGui.prototype,{__index=__defold_support_GuiScript.prototype})

__meta_MetaScreenGui.new = function() 
  local self = _hx_new(__meta_MetaScreenGui.prototype)
  __meta_MetaScreenGui.super(self)
  return self
end
__meta_MetaScreenGui.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__meta_MetaScreenGui.__name__ = true
__meta_MetaScreenGui.prototype = _hx_e();
__meta_MetaScreenGui.prototype.init = function(self,_self) 
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _G.gui.set_render_order(0);
  _self.gui = __gui_GUI.new(InputRes.touch, "MetaScreen", 1);
  _self.gui:buttonUpDown("startSingle", true):OnClickHandle(function() 
    __arena_ArenaScreen.EnterCommon();
  end);
  _self.gui:buttonUpDown("startPvp", true):OnClickHandle(function() 
    __arena_ArenaScreen.EnterWs("ws://127.0.0.1:80/ws");
  end);
end
__meta_MetaScreenGui.prototype.on_input = function(self,_self,action_id,action) 
  _self.gui:on_input(action_id, action);
  do return true end
end

__meta_MetaScreenGui.prototype.__class__ =  __meta_MetaScreenGui
__meta_MetaScreenGui.__super__ = __defold_support_GuiScript
setmetatable(__meta_MetaScreenGui.prototype,{__index=__defold_support_GuiScript.prototype})

__defold_support_Init.new = {}
__defold_support_Init.__name__ = true
__defold_support_Init.init = function(exports) 
  local script = __arena_BlockView.new();
  exports.arena_BlockView_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = __meta_MetaScreen.new();
  exports.meta_MetaScreen_init = function(_self) 
    script:init(_self);
  end;
  exports.meta_MetaScreen_final_ = function(_self) 
    script:final_(_self);
  end;
  local script = Main.new();
  exports.Main_init = function(_self) 
    script:init(_self);
  end;
  exports.Main_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = __arena_ArenaLobbyWindow.new();
  exports.arena_ArenaLobbyWindow_init = function(_self) 
    script:init(_self);
  end;
  exports.arena_ArenaLobbyWindow_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  exports.arena_ArenaLobbyWindow_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = __arena_ArenaScreenGui.new();
  exports.arena_ArenaScreenGui_init = function(_self) 
    script:init(_self);
  end;
  exports.arena_ArenaScreenGui_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = __meta_MetaResultMessageGui.new();
  exports.meta_MetaResultMessageGui_init = function(_self) 
    script:init(_self);
  end;
  exports.meta_MetaResultMessageGui_final_ = function(_self) 
    script:final_(_self);
  end;
  exports.meta_MetaResultMessageGui_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  exports.meta_MetaResultMessageGui_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = __arena_ArenaScreen.new();
  exports.arena_ArenaScreen_init = function(_self) 
    script:init(_self);
  end;
  exports.arena_ArenaScreen_final_ = function(_self) 
    script:final_(_self);
  end;
  exports.arena_ArenaScreen_update = function(_self,dt) 
    script:update(_self, dt);
  end;
  exports.arena_ArenaScreen_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = __meta_MetaScreenGui.new();
  exports.meta_MetaScreenGui_init = function(_self) 
    script:init(_self);
  end;
  exports.meta_MetaScreenGui_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = __arena_RocketView.new();
  exports.arena_RocketView_init = function(_self) 
    script:init(_self);
  end;
  exports.arena_RocketView_update = function(_self,dt) 
    script:update(_self, dt);
  end;
  exports.arena_RocketView_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
end

__gui_Button.new = function(up,down) 
  local self = _hx_new(__gui_Button.prototype)
  __gui_Button.super(self,up,down)
  return self
end
__gui_Button.super = function(self,up,down) 
  self.visible = true;
  self.clickHandle = __haxe_ds_List.new();
  self.click = __haxe_ds_List.new();
  self.up = up;
  self.down = down;
end
__gui_Button.__name__ = true
__gui_Button.prototype = _hx_e();
__gui_Button.prototype.up= nil;
__gui_Button.prototype.down= nil;
__gui_Button.prototype.click= nil;
__gui_Button.prototype.clickHandle= nil;
__gui_Button.prototype.visible= nil;
__gui_Button.prototype.OnClickHandle = function(self,handle) 
  self.clickHandle:add(handle);
  do return self end
end

__gui_Button.prototype.__class__ =  __gui_Button
_hxClasses["gui.Capture"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="None","ListBox"},2)}
__gui_Capture = _hxClasses["gui.Capture"];
__gui_Capture.None = _hx_tab_array({[0]="None",0,__enum__ = __gui_Capture},2)

__gui_Capture.ListBox = function(listbox) local _x = _hx_tab_array({[0]="ListBox",1,listbox,__enum__=__gui_Capture}, 3); return _x; end 

__gui_GUI.new = function(touchEvent,textRoot,scale) 
  local self = _hx_new(__gui_GUI.prototype)
  __gui_GUI.super(self,touchEvent,textRoot,scale)
  return self
end
__gui_GUI.super = function(self,touchEvent,textRoot,scale) 
  self._capture = __gui_Capture.None;
  self.listboxes = Array.new();
  self.buttons = Array.new();
  self.touchEvent = touchEvent;
  self.textRoot = textRoot;
  self.scale = scale;
end
__gui_GUI.__name__ = true
__gui_GUI.prototype = _hx_e();
__gui_GUI.prototype.touchEvent= nil;
__gui_GUI.prototype.textRoot= nil;
__gui_GUI.prototype.scale= nil;
__gui_GUI.prototype.buttons= nil;
__gui_GUI.prototype.listboxes= nil;
__gui_GUI.prototype._capture= nil;
__gui_GUI.prototype.on_input = function(self,action_id,action) 
  if (action_id ~= self.touchEvent) then 
    do return false end;
  end;
  local _g = self._capture;
  local tmp = _g[1];
  if (tmp) == 0 then 
  elseif (tmp) == 1 then 
    self:performListbox(_g[2], action_id, action, true); end;
  local result = false;
  local _g = 0;
  local _g1 = self.buttons;
  while (_g < _g1.length) do 
    local b = _g1[_g];
    _g = _g + 1;
    local tmp;
    if (not b.visible) then 
      tmp = false;
    else
      local result = false;
      local over = _G.gui.pick_node(b.up, action.x, action.y);
      if (over) then 
        result = true;
      end;
      if (not action.released) then 
        if (b.down ~= nil) then 
          _G.gui.set_enabled(b.up, not over);
          _G.gui.set_enabled(b.down, over);
        end;
      else
        if (b.down ~= nil) then 
          _G.gui.set_enabled(b.up, true);
          _G.gui.set_enabled(b.down, false);
        end;
        if (over) then 
          local _g_head = b.click.h;
          while (_g_head ~= nil) do 
            local val = _g_head.item;
            _g_head = _g_head.next;
            _G.msg.post(val.target, val.event);
          end;
          local _g1_head = b.clickHandle.h;
          while (_g1_head ~= nil) do 
            local val = _g1_head.item;
            _g1_head = _g1_head.next;
            val();
          end;
        end;
      end;
      tmp = result;
    end;
    if (tmp) then 
      result = true;
    end;
  end;
  local _g = 0;
  local _g1 = self.listboxes;
  while (_g < _g1.length) do 
    local l = _g1[_g];
    _g = _g + 1;
    self:performListbox(l, action_id, action, false);
    if (self._capture ~= __gui_Capture.None) then 
      do return true end;
    end;
  end;
  do return result end
end
__gui_GUI.prototype.performListbox = function(self,l,action_id,action,captured) 
  if (not captured) then 
    if (not action.pressed or not _G.gui.pick_node(l.box, action.x, action.y)) then 
      do return end;
    end;
    self._capture = __gui_Capture.ListBox(l);
    l:capture(action);
  else
    l:update(action);
    if (action.released) then 
      l:releaseCaptuere();
      self._capture = __gui_Capture.None;
    end;
  end;
end
__gui_GUI.prototype.label = function(self,nodeName,customId) 
  _G.gui.set_text(_G.gui.get_node(nodeName), __gui_TextMap.gui(self.textRoot, (function() 
    local _hx_1
    if (customId ~= nil) then 
    _hx_1 = customId; else 
    _hx_1 = nodeName; end
    return _hx_1
  end )()));
end
__gui_GUI.prototype.button = function(self,up,down) 
  local button = __gui_Button.new(up, down);
  if (button.down ~= nil) then 
    _G.gui.set_enabled(up, true);
    _G.gui.set_enabled(down, false);
  end;
  self.buttons:push(button);
  do return button end
end
__gui_GUI.prototype.buttonUpDown = function(self,nodeName,withText) 
  if (withText == nil) then 
    withText = false;
  end;
  if (withText) then 
    local id = Std.string(Std.string("") .. Std.string(nodeName)) .. Std.string("/text");
    self:label(id);
    self:label(Std.string(Std.string("") .. Std.string(nodeName)) .. Std.string("/text_down"), id);
  end;
  do return self:button(_G.gui.get_node(Std.string(Std.string("") .. Std.string(nodeName)) .. Std.string("/up")), _G.gui.get_node(Std.string(Std.string("") .. Std.string(nodeName)) .. Std.string("/down"))) end
end

__gui_GUI.prototype.__class__ =  __gui_GUI

__gui__Listbox_ListboxListener_Impl_.new = {}
__gui__Listbox_ListboxListener_Impl_.__name__ = true
__gui__Listbox_ListboxListener_Impl_.call = function(this1,virualIndex,index) 
  this1(virualIndex, index);
end

__gui_Listbox.new = function(box,content,scale) 
  local self = _hx_new(__gui_Listbox.prototype)
  __gui_Listbox.super(self,box,content,scale)
  return self
end
__gui_Listbox.super = function(self,box,content,scale) 
  self._itemPosTMP = _G.vmath.vector3();
  self._listeners = __haxe_ds_List.new();
  self._listY0 = 0;
  self._listY = 0;
  self._size = 0;
  self._topVirtualItem = 0;
  self._topItem = -1;
  self._contentPivot = 0.5;
  self._itemHeight = 1;
  self.box = box;
  self.content = content;
  self.scale = scale;
  self._contentSize = _G.gui.get_size(content);
  self._contentPos0 = _G.gui.get_position(content);
  self._contentPos = _G.vmath.vector3(self._contentPos0.x, self._contentPos0.y, self._contentPos0.z);
end
__gui_Listbox.__name__ = true
__gui_Listbox.prototype = _hx_e();
__gui_Listbox.prototype.box= nil;
__gui_Listbox.prototype.content= nil;
__gui_Listbox.prototype.scale= nil;
__gui_Listbox.prototype._itemHeight= nil;
__gui_Listbox.prototype._contentPivot= nil;
__gui_Listbox.prototype._topItem= nil;
__gui_Listbox.prototype._topVirtualItem= nil;
__gui_Listbox.prototype._items= nil;
__gui_Listbox.prototype._size= nil;
__gui_Listbox.prototype._contentSize= nil;
__gui_Listbox.prototype._contentPos0= nil;
__gui_Listbox.prototype._contentPos= nil;
__gui_Listbox.prototype._listY= nil;
__gui_Listbox.prototype._listY0= nil;
__gui_Listbox.prototype._captureY= nil;
__gui_Listbox.prototype._listeners= nil;
__gui_Listbox.prototype.capture = function(self,action) 
  self._captureY = _hx_funcToField(action.y);
  self._listY0 = self._listY;
end
__gui_Listbox.prototype.update = function(self,action) 
  self._listY = _G.math.max(0, _G.math.min((self._itemHeight * self._size) - self._contentSize.y, self._listY0 + ((action.y - self._captureY) / self.scale)));
  self:updateScroll(false);
end
__gui_Listbox.prototype.releaseCaptuere = function(self) 
end
__gui_Listbox.prototype._itemPosTMP= nil;
__gui_Listbox.prototype.updateScroll = function(self,force) 
  if (self._items == nil) then 
    do return end;
  end;
  self._contentPos.y = self._contentPos0.y + (_G.math.fmod(self._listY, self._itemHeight));
  _G.gui.set_position(self.content, self._contentPos);
  local topItem = Std.int(self._listY / self._itemHeight);
  if (topItem == self._topItem) then 
    do return end;
  end;
  self._topItem = topItem;
  self._topVirtualItem = _G.math.fmod(self._topItem, self._items.length);
  local itemsSize = self._items.length;
  local _g = 0;
  local _g1 = self._items.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local index = self._topItem + i;
    local vIndex = _G.math.fmod(index, itemsSize);
    local node = self._items[vIndex];
    if (index >= self._size) then 
      _G.gui.set_enabled(node, false);
    else
      self._itemPosTMP.y = ((self._contentSize.y * self._contentPivot) + (self._itemHeight * self._contentPivot)) - (self._itemHeight * i);
      _G.gui.set_enabled(node, true);
      _G.gui.set_position(node, self._itemPosTMP);
      local _g_head = self._listeners.h;
      while (_g_head ~= nil) do 
        local val = _g_head.item;
        _g_head = _g_head.next;
        __gui__Listbox_ListboxListener_Impl_.call(val, vIndex, index);
      end;
    end;
  end;
end

__gui_Listbox.prototype.__class__ =  __gui_Listbox

__gui_TextMap.new = {}
__gui_TextMap.__name__ = true
__gui_TextMap.gui = function(root,id) 
  if (root == "MetaScreen") then 
    if (id) == "startPvp/text" then 
      do return "PvP" end;
    elseif (id) == "startSingle/text" then 
      do return "Single" end; end;
  end;
  do return Std.string(Std.string(Std.string("") .. Std.string(root)) .. Std.string(":")) .. Std.string(id) end;
end

__gui_Windows.new = function(root) 
  local self = _hx_new(__gui_Windows.prototype)
  __gui_Windows.super(self,root)
  return self
end
__gui_Windows.super = function(self,root) 
  self._windows = __haxe_ds_StringMap.new();
  self._root = root;
end
__gui_Windows.__name__ = true
__gui_Windows.prototype = _hx_e();
__gui_Windows.prototype._root= nil;
__gui_Windows.prototype._currentId= nil;
__gui_Windows.prototype._currentWindow= nil;
__gui_Windows.prototype._windows= nil;
__gui_Windows.prototype.register = function(self,id,windowId) 
  local _this = self._windows;
  if (windowId == nil) then 
    _this.h[id] = __haxe_ds_StringMap.tnull;
  else
    _this.h[id] = windowId;
  end;
  _G.go.set_parent(windowId, self._root);
  _G.msg.post(windowId, __defold_GoMessages.disable);
end
__gui_Windows.prototype.show = function(self,id) 
  if (self._currentId == id) then 
    do return self._currentWindow end;
  end;
  if (self._currentWindow ~= nil) then 
    _G.msg.post(self._currentWindow, __defold_GoMessages.disable);
  end;
  local ret = self._windows.h[id];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  self._currentWindow = ret;
  if (self._currentWindow == nil) then 
    self._currentId = nil;
    do return nil end;
  end;
  self._currentId = id;
  _G.msg.post(self._currentWindow, __defold_GoMessages.enable);
  do return self._currentWindow end
end
__gui_Windows.prototype.hide = function(self) 
  if (self._currentWindow == nil) then 
    do return end;
  end;
  _G.msg.post(self._currentWindow, __defold_GoMessages.disable);
  self._currentWindow = nil;
  self._currentId = nil;
end

__gui_Windows.prototype.__class__ =  __gui_Windows

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.__exceptionMessage= nil;
__haxe_Exception.prototype.__nativeStack= nil;
__haxe_Exception.prototype.__skipStack= nil;
__haxe_Exception.prototype.__nativeException= nil;
__haxe_Exception.prototype.__previousException= nil;
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Exception.prototype.__properties__ =  {get_native="get_native"}

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (#"\n" > 0) then 
        newidx = _G.string.find(_g, "\n", idx, true);
      else
        if (idx >= #_g) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        ret:push(_G.string.sub(_g, idx, newidx - 1));
        idx = newidx + #"\n";
      else
        ret:push(_G.string.sub(_g, idx, #_g));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,Std.string(value),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.value= nil;

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_ValueException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_IntMap.__name__ = true
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_e();
__haxe_ds_IntMap.prototype.h= nil;

__haxe_ds_IntMap.prototype.__class__ =  __haxe_ds_IntMap

__haxe_ds_List.new = function() 
  local self = _hx_new(__haxe_ds_List.prototype)
  __haxe_ds_List.super(self)
  return self
end
__haxe_ds_List.super = function(self) 
  self.length = 0;
end
__haxe_ds_List.__name__ = true
__haxe_ds_List.prototype = _hx_e();
__haxe_ds_List.prototype.h= nil;
__haxe_ds_List.prototype.q= nil;
__haxe_ds_List.prototype.length= nil;
__haxe_ds_List.prototype.add = function(self,item) 
  local next = nil;
  local x = __haxe_ds__List_ListNode.new(item, next);
  if (self.h == nil) then 
    self.h = x;
  else
    self.q.next = x;
  end;
  self.q = x;
  self.length = self.length + 1;
end

__haxe_ds_List.prototype.__class__ =  __haxe_ds_List

__haxe_ds__List_ListNode.new = function(item,next) 
  local self = _hx_new(__haxe_ds__List_ListNode.prototype)
  __haxe_ds__List_ListNode.super(self,item,next)
  return self
end
__haxe_ds__List_ListNode.super = function(self,item,next) 
  self.item = item;
  self.next = next;
end
__haxe_ds__List_ListNode.__name__ = true
__haxe_ds__List_ListNode.prototype = _hx_e();
__haxe_ds__List_ListNode.prototype.item= nil;
__haxe_ds__List_ListNode.prototype.next= nil;

__haxe_ds__List_ListNode.prototype.__class__ =  __haxe_ds__List_ListNode

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = _hx_funcToField(replacer);
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
__haxe_format_JsonPrinter.__name__ = true
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_e();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self:replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "null");
    _this.length = _this.length + #"null";
  elseif (tmp) == 1 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 2 then 
    local v = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 3 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"<fun>\"");
    _this.length = _this.length + #"\"<fun>\"";
  elseif (tmp) == 6 then 
    local _g = _g[2];
    if (_g == String) then 
      self:quote(v);
    else
      if (_g == Array) then 
        local v = v;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(91));
        _this.length = _this.length + 1;
        local len = v.length;
        local last = len - 1;
        local _g = 0;
        while (_g < len) do 
          _g = _g + 1;
          local i = _g - 1;
          if (i > 0) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(44));
            _this.length = _this.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(10));
            _this.length = _this.length + 1;
          end;
          if (self.pretty) then 
            local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this = self.buf;
            local str = Std.string(v);
            _G.table.insert(_this.b, str);
            _this.length = _this.length + #str;
          end;
          self:write(i, v[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this = self.buf;
              _G.table.insert(_this.b, _G.string.char(10));
              _this.length = _this.length + 1;
            end;
            if (self.pretty) then 
              local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this = self.buf;
              local str = Std.string(v);
              _G.table.insert(_this.b, str);
              _this.length = _this.length + #str;
            end;
          end;
        end;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(93));
        _this.length = _this.length + 1;
      else
        if (_g == __haxe_ds_StringMap) then 
          local v = v;
          local o = _hx_e();
          local k = v:keys();
          while (k:hasNext()) do 
            local k = k:next();
            local ret = v.h[k];
            if (ret == __haxe_ds_StringMap.tnull) then 
              ret = nil;
            end;
            o[k] = ret;
          end;
          local v = o;
          self:fieldsString(v, Reflect.fields(v));
        else
          if (_g == Date) then 
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local _this = self.buf;
    local str = Std.string(v[1]);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 8 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"???\"");
    _this.length = _this.length + #"\"???\""; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  _this.length = _this.length + 1;
  local len = fields.length;
  local last = len - 1;
  local first = true;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < len) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (first) then 
      self.nind = self.nind + 1;
      first = false;
    else
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(44));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      _this.length = _this.length + #str;
    end;
    self:quote(f);
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(58));
    _this.length = _this.length + 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(32));
      _this.length = _this.length + 1;
    end;
    self:write(f, value);
    if (i == last) then 
      self.nind = self.nind - 1;
      if (self.pretty) then 
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(10));
        _this.length = _this.length + 1;
      end;
      if (self.pretty) then 
        local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
        local _this = self.buf;
        local str = Std.string(v);
        _G.table.insert(_this.b, str);
        _this.length = _this.length + #str;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(125));
  _this.length = _this.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
  local i = 0;
  local length = #s;
  while (i < length) do 
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    if (c) == 8 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\b");
      _this.length = _this.length + #"\\b";
    elseif (c) == 9 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\t");
      _this.length = _this.length + #"\\t";
    elseif (c) == 10 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\n");
      _this.length = _this.length + #"\\n";
    elseif (c) == 12 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\f");
      _this.length = _this.length + #"\\f";
    elseif (c) == 13 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\r");
      _this.length = _this.length + #"\\r";
    elseif (c) == 34 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\"");
      _this.length = _this.length + #"\\\"";
    elseif (c) == 92 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\\");
      _this.length = _this.length + #"\\\\";else
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(c));
    _this.length = _this.length + 1; end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.array= nil;
__haxe_iterators_ArrayIterator.prototype.current= nil;
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.array= nil;

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__meta_MetaResultMessageGuiMessages.new = {}
__meta_MetaResultMessageGuiMessages.__name__ = true
_hxClasses["meta.Enter"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Common","Disconnected","Result"},3)}
__meta_Enter = _hxClasses["meta.Enter"];
__meta_Enter.Common = _hx_tab_array({[0]="Common",0,__enum__ = __meta_Enter},2)

__meta_Enter.Disconnected = _hx_tab_array({[0]="Disconnected",1,__enum__ = __meta_Enter},2)

__meta_Enter.Result = function(winnder,result,score,oponentScore) local _x = _hx_tab_array({[0]="Result",2,winnder,result,score,oponentScore,__enum__=__meta_Enter}, 6); return _x; end 

__meta_MetaScreenRes.new = {}
__meta_MetaScreenRes.__name__ = true
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;
  _hxdefold_ = _hxdefold_ or {}
  __defold_support_Init.init(_hxdefold_);InputRes.touch = _G.hash("touch");
  
  MainRes.screen = _G.msg.url("main:/screen");
  
  MainRes.screen_collection_proxy_arena = _G.msg.url("main:/screen#collection_proxy_arena");
  
  MainRes.screen_collection_proxy_meta = _G.msg.url("main:/screen#collection_proxy_meta");
  
  ScreenMessages.goto_screen = _G.hash("main_goto_screen");
  
  __arena_ArenaAtlasRes.Jelly_1 = _G.hash("Jelly_1");
  
  __arena_ArenaAtlasRes.Jelly_2 = _G.hash("Jelly_2");
  
  __arena_ArenaAtlasRes.Jelly_3 = _G.hash("Jelly_3");
  
  __arena_ArenaAtlasRes.Jelly_4 = _G.hash("Jelly_4");
  
  __arena_ArenaAtlasRes.Jelly_5 = _G.hash("Jelly_5");
  
  __arena_ArenaAtlasRes.Jelly_6 = _G.hash("Jelly_6");
  
  __arena_ArenaAtlasRes.Rocket_Hor = _G.hash("Rocket_Hor");
  
  __arena_ArenaAtlasRes.Rocket_Vert = _G.hash("Rocket_Vert");
  
  __arena_ArenaLobbyWindowMessages.show = _G.hash("arena_lobby_window_show");
  
  __arena_ArenaLobbyWindowMessages.connected = _G.hash("arena_lobby_window_connected");
  
  __arena_ArenaLobbyWindowMessages.disconnected = _G.hash("arena_lobby_window_disconnected");
  
  __arena_ArenaLobbyWindowRes.label = "label";
  
  __arena_ArenaScreenGuiMessages.time_left = _G.hash("arena_screen_gui_time_left");
  
  __arena_ArenaScreenGuiMessages.append_score = _G.hash("arena_screen_gui_append_score");
  
  __arena_ArenaScreenGuiRes.timerText = "timerText";
  
  __arena_ArenaScreenGuiRes.timer_fill = "timer_fill";
  
  __arena_ArenaScreenGuiRes.playerScore = "playerScore";
  
  __arena_ArenaScreenGuiRes.oponentScore = "oponentScore";
  
  __arena_ArenaScreenRes.arena = _G.msg.url("arena:/arena");
  
  __arena_ArenaScreenRes.arena_block_factory = _G.msg.url("arena:/arena#block_factory");
  
  __arena_ArenaScreenRes.solid = _G.msg.url("arena:/solid");
  
  __arena_ArenaScreenRes.solid_sprite = _G.msg.url("arena:/solid#sprite");
  
  __arena_ArenaScreenRes.gui = _G.msg.url("arena:/gui");
  
  __arena_ArenaScreenRes.window_lobby = _G.msg.url("arena:/window_lobby");
  
  __arena_BlockViewMessages.setup = _G.hash("block_view_setup");
  
  __arena_BlockViewMessages.remove = _G.hash("block_view_remove");
  
  __arena_BlockViewMessages.move = _G.hash("block_view_move");
  
  __arena_BlockViewMessages.activate = _G.hash("block_view_activate");
  
  __arena_BlockViewRes.sprite = "#sprite";
  
  __arena_BlockViewRes.factory_rocket = "#factory_rocket";
  
  __arena_RocketMessages.setup = _G.hash("rocket_setup");
  
  __arena_stage_Arena.Colors = _hx_tab_array({[0]=1, 2, 3, 4}, 4);
  
  __arena_stage_Arena.Rockets = _hx_tab_array({[0]=8, 7}, 2);
  
  __defold_CollectionproxyMessages.async_load = _G.hash("async_load");
  
  __defold_CollectionproxyMessages.disable = _G.hash("disable");
  
  __defold_CollectionproxyMessages.enable = _G.hash("enable");
  
  __defold_CollectionproxyMessages.init = _G.hash("init");
  
  __defold_CollectionproxyMessages.proxy_loaded = _G.hash("proxy_loaded");
  
  __defold_CollectionproxyMessages.unload = _G.hash("unload");
  
  __defold_GoMessages.acquire_input_focus = _G.hash("acquire_input_focus");
  
  __defold_GoMessages.disable = _G.hash("disable");
  
  __defold_GoMessages.enable = _G.hash("enable");
  
  __defold_GoMessages.release_input_focus = _G.hash("release_input_focus");
  
  __haxe_ds_IntMap.tnull = ({});
  
  __haxe_ds_StringMap.tnull = ({});
  
  __meta_MetaResultMessageGuiMessages.setup = _G.hash("meta_result_message_gui_setup");
  
  __meta_MetaScreenRes.gui = _G.msg.url("meta:/gui");
  
  __meta_MetaScreenRes.resultMessage = _G.msg.url("meta:/resultMessage");
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
